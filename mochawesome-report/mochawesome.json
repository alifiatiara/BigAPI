{
  "stats": {
    "suites": 5,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-04T01:36:38.842Z",
    "end": "2022-11-04T01:36:46.736Z",
    "duration": 7894,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "59fd99e6-9dab-483a-816a-755475ba71bc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8ab330c1-17dd-4e2a-91df-2afda99db8ec",
          "title": "CreateToken",
          "fullFile": "C:\\Users\\alifi\\OneDrive\\Documents\\StudyJam\\BigAPI\\test\\scenarios\\createtoken.test.js",
          "file": "\\test\\scenarios\\createtoken.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successful create token when input valid data",
              "fullTitle": "CreateToken Should successful create token when input valid data",
              "timedOut": false,
              "duration": 1440,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await BigAPI.CreateToken(data.VALID_CREATE_TOKEN);\nassert.equal(response.status, 200);\nassert.containsAllKeys(response.data, [\"token\"]);\nassert.isString(response.data.token);",
              "err": {},
              "uuid": "26046293-8f2b-4078-81a5-ac17bd34c7b3",
              "parentUUID": "8ab330c1-17dd-4e2a-91df-2afda99db8ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26046293-8f2b-4078-81a5-ac17bd34c7b3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1440,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "f6623e6e-5559-4ef3-be21-f3797f75ce09",
          "title": "GetBookingIds",
          "fullFile": "C:\\Users\\alifi\\OneDrive\\Documents\\StudyJam\\BigAPI\\test\\scenarios\\GetBookingIds.test.js",
          "file": "\\test\\scenarios\\GetBookingIds.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successful get booking ids when use valid token",
              "fullTitle": "GetBookingIds Should successful get booking ids when use valid token",
              "timedOut": false,
              "duration": 1849,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await BigAPI.GetBookingIds();\n\nassert.equal(response.status, 200);\nassert.containsAllKeys(response.data[0], [\"bookingid\"]);\nassert.isNumber(response.data[0].bookingid);",
              "err": {},
              "uuid": "5dcaefef-5eeb-4bc3-a853-5fd6a696fa59",
              "parentUUID": "f6623e6e-5559-4ef3-be21-f3797f75ce09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5dcaefef-5eeb-4bc3-a853-5fd6a696fa59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1849,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "193c2aa4-739a-4dfb-9b9c-421270531d2f",
          "title": "GetBookingIdsName",
          "fullFile": "C:\\Users\\alifi\\OneDrive\\Documents\\StudyJam\\BigAPI\\test\\scenarios\\GetBookingIds.test.js",
          "file": "\\test\\scenarios\\GetBookingIds.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successful get booking ids when use valid firstname and lastname",
              "fullTitle": "GetBookingIdsName Should successful get booking ids when use valid firstname and lastname",
              "timedOut": false,
              "duration": 1801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await BigAPI.GetBookingIdsName(data.USER_DATA);\n    \nassert.equal(response.status, 200);\nassert.containsAllKeys(response.data[0], [\"bookingid\"]);\nassert.isNumber(response.data[0].bookingid);",
              "err": {},
              "uuid": "c6de3301-4a91-4522-a5d2-96242a78b7ea",
              "parentUUID": "193c2aa4-739a-4dfb-9b9c-421270531d2f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6de3301-4a91-4522-a5d2-96242a78b7ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1801,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "0e36cc9a-bcfa-483b-909d-7f52df3374c0",
          "title": "GetBookingIdsDate",
          "fullFile": "C:\\Users\\alifi\\OneDrive\\Documents\\StudyJam\\BigAPI\\test\\scenarios\\GetBookingIds.test.js",
          "file": "\\test\\scenarios\\GetBookingIds.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successful get booking ids when use valid checkin and checkout",
              "fullTitle": "GetBookingIdsDate Should successful get booking ids when use valid checkin and checkout",
              "timedOut": false,
              "duration": 1863,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await BigAPI.GetBookingIdsDate(data.USER_DATA);\nassert.equal(response.status, 200);\nassert.containsAllKeys(response.data[0], [\"bookingid\"]);\nassert.isNumber(response.data[0].bookingid);",
              "err": {},
              "uuid": "2343d966-22c4-4fac-92ea-976db334d20e",
              "parentUUID": "0e36cc9a-bcfa-483b-909d-7f52df3374c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2343d966-22c4-4fac-92ea-976db334d20e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1863,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "957b8521-a88a-4c5f-811c-886423a43c95",
          "title": "Healtcheck",
          "fullFile": "C:\\Users\\alifi\\OneDrive\\Documents\\StudyJam\\BigAPI\\test\\scenarios\\healthcheck.test.js",
          "file": "\\test\\scenarios\\healthcheck.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successful get health check endpoint to confirm whether the API is up and running.",
              "fullTitle": "Healtcheck Should successful get health check endpoint to confirm whether the API is up and running.",
              "timedOut": false,
              "duration": 924,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await BigAPI.HealthCheck();\nassert.equal(response.status, 201);\nassert.equal(response.data, [\"Created\"]);\nassert.isString(response.data);",
              "err": {},
              "uuid": "8aa9bc1d-e1a7-4b3e-893e-367095060b11",
              "parentUUID": "957b8521-a88a-4c5f-811c-886423a43c95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8aa9bc1d-e1a7-4b3e-893e-367095060b11"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 924,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}